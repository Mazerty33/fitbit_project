<?php

namespace Fitbit\FitappBundle\Repository;

use Fitbit\FitappBundle\Entity\Data;

/**
 * DataRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DataRepository extends \Doctrine\ORM\EntityRepository
{
    function getLast(){
        $qb = $this->createQueryBuilder('d')
            ->orderBy('d.id', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
        return $qb;
    }

    function getOneYear($today){
        $today= \DateTime::createFromFormat('Y-m-d', $today);
        $tempDate=clone($today);
        $startYear =date_sub($tempDate,date_interval_create_from_date_string("1 year"));
        $qb = $this->createQueryBuilder('d')
            ->andWhere('d.date BETWEEN :start AND :end')
            ->setParameter('end',$today)
            ->setParameter('start',  $startYear)
            ->getQuery()
            ->getResult();



        $January = new Data();
        $February = new Data();
        $March = new Data();
        $April = new Data();
        $May = new Data();
        $June = new Data();
        $July = new Data();
        $August = new Data();
        $September = new Data();
        $October = new Data();
        $December = new Data();

        $months = array('January'=>$January,
            'February'=>$February,
            'March' => $March,
            'April'=>$April,
            'May'=> $May,
            'June'=>$June,
            'July'=>$July,
            'August'=>$August,
            'September'=>$September,
            'October'=>$October,
            'December'=>$December);

        function addSteps($monthObject, $dayObject){
            $monthObject->setSteps($monthObject->getSteps()+$dayObject->getSteps());
        }

        function addFloors($monthObject, $dayObject){
            $monthObject->setFloors($monthObject->getFloors()+$dayObject->getFloors());
        }
        foreach($qb as $day) {
            $monthNumber = (int)$day->getDate()->format('m');
            foreach($months as $i => $month){
                $i = array_search($i, array_keys($months));
                if($monthNumber >$i && $monthNumber <= $i+1){
                    addSteps($month, $day);
                    addFloors($month, $day);
                }
            }
        }
        return $months;
    }
    function getOneYearArray($today){
        $today= \DateTime::createFromFormat('Y-m-d', $today);
        $tempDate=clone($today);
        $startYear =date_sub($tempDate,date_interval_create_from_date_string("1 year"));
        $qb = $this->createQueryBuilder('d')
            ->andWhere('d.date BETWEEN :start AND :end')
            ->setParameter('end',$today)
            ->setParameter('start',  $startYear)
            ->getQuery()
            ->getResult();

        $months = array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December');

        $steps = array(
            'January'=>0,
            'February'=>0,
            'March'=>0,
            'April'=>0,
            'May'=>0,
            'June'=>0,
            'July'=>0,
            'August'=>0,
            'September'=>0,
            'October'=>0,
            'November'=>0,
            'December'=>0
        );

        foreach($qb as $day) {
            $monthNumber = (int)$day->getDate()->format('m');
            foreach($months as $i=>$month){
                if($monthNumber >$i && $monthNumber <= $i+1){
                    $steps[$month]+=$day->getSteps();
                }
            }
        }
        return $steps;
    }
    function getArray($today, $type, $period){
        if($period=="oneYear")
            $timePeriod = "1 year";
        elseif($period=="threeMonths")
            $timePeriod = "3 Months";
        elseif($period=="oneMonth")
            $timePeriod = "1 Month";
        elseif($period=="oneWeek")
            $timePeriod= "1 week";

        $today= \DateTime::createFromFormat('Y-m-d', $today);
        $tempDate=clone($today);
        $startDate =date_sub($tempDate,date_interval_create_from_date_string($timePeriod));
        $qb = $this->createQueryBuilder('d')
            ->andWhere('d.date BETWEEN :start AND :end')
            ->setParameter('end',$today)
            ->setParameter('start',  $startDate)
            ->getQuery()
            ->getResult();

        $months = array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December');
        $returnMonths = array(
            'January'=>0,
            'February'=>0,
            'March'=>0,
            'April'=>0,
            'May'=>0,
            'June'=>0,
            'July'=>0,
            'August'=>0,
            'September'=>0,
            'October'=>0,
            'November'=>0,
            'December'=>0
        );

        foreach($qb as $day) {
            $monthNumber = (int)$day->getDate()->format('m');
            foreach($months as $i=>$month){
                if($monthNumber >$i && $monthNumber <= $i+1){
                    if($type=="steps")
                        $returnMonths[$month]+=$day->getSteps();
                    elseif($type=="floors")
                        $returnMonths[$month]+=$day->getFloors();
                }
            }
        }
        //$returnMonths = array_reverse($returnMonths);


        for($i=0; $i<3; $i++){
            $val = $returnMonths[$months[$i]];
            unset($returnMonths[$months[$i]]);
            $returnMonths[$months[$i]]=$val;
        }
        foreach($returnMonths as $key=>$value)
            if($value==0)
                unset($returnMonths[$key]);

        return $returnMonths;
    }
}
